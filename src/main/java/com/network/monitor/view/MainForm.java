/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.network.monitor.view;

import com.network.monitor.controller.ContactController;
import com.network.monitor.controller.DiskMonitorController;
import com.network.monitor.controller.SettingsController;
import com.network.monitor.controller.TestController;
import com.network.monitor.domain.Contact;
import com.network.monitor.domain.DriveUsage;
import com.network.monitor.domain.EmailSettings;
import com.network.monitor.domain.Server;
import com.network.monitor.domain.Setting;
import com.network.monitor.service.AppSettingsService;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author opetridean
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    List<Server> servers;
    DefaultListModel defaultListModel;
    DefaultListModel emailSettingsListModel;
    ContactController contactController = new ContactController();
    DiskMonitorController diskMonitorController = new DiskMonitorController();
    SettingsController settingsController = new SettingsController();
    TestController testController = new TestController();
    Setting setting;

    public MainForm() {
        servers = new ArrayList<Server>();
        initComponents();
        initServersList();
        loadContactTableInfo();
        loadSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serversList = new javax.swing.JList();
        scanButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        serverSpecsTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        domainNameTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        osNameTextFieldComp = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        osVersionTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        computerNameTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        serialNoTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        compModelTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cpuTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        ramTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        dvdTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        ipv4TextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        macTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        contactsTable = new javax.swing.JTable();
        smsButton = new javax.swing.JButton();
        emailButton = new javax.swing.JButton();
        saveContactsButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        saveSettingsButton = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        smsTextField1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        smsUrlSingTelTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        starhubSenderName = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        starhubNumber = new javax.swing.JTextField();
        starhubTestSend = new javax.swing.JToggleButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        singtelSenderName = new javax.swing.JTextField();
        singtelNumber = new javax.swing.JTextField();
        singtelTestSend = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        starhubTestMessage = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        singtelTestMessage = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        userTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        emailPasswordField = new javax.swing.JPasswordField();
        jScrollPane5 = new javax.swing.JScrollPane();
        emailSettingList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mailServerHost = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        createMailButton = new javax.swing.JButton();
        saveMailButton = new javax.swing.JButton();
        deleteMailButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        configNameTextField = new javax.swing.JTextField();
        enabledCheckBox = new javax.swing.JCheckBox();
        mailServerPortTextField = new javax.swing.JFormattedTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serversList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Local" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        serversList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(serversList);

        scanButton.setText("Scan");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        serverSpecsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drive Letter", "Capacity Space (GB)", "Free Space (GB)", "File System"
            }
        ));
        jScrollPane4.setViewportView(serverSpecsTable);

        jLabel9.setText("User Name");

        userNameTextField.setEditable(false);

        jLabel10.setText("Domain Name");

        domainNameTextField.setEditable(false);

        jLabel11.setText("OS Name");

        osNameTextFieldComp.setEditable(false);

        jLabel12.setText("OS Version");

        osVersionTextField.setEditable(false);

        jLabel13.setText("Computer Name");

        computerNameTextField.setEditable(false);

        jLabel14.setText("Serial No");

        serialNoTextField.setEditable(false);

        jLabel15.setText("Model");

        compModelTextField.setEditable(false);

        jLabel16.setText("CPU");

        cpuTextField.setEditable(false);

        jLabel17.setText("RAM Capacity (MB))");

        ramTextField.setEditable(false);

        jLabel18.setText("CD\\DVD Drive");

        dvdTextField.setEditable(false);

        jLabel19.setText("IPV4");

        ipv4TextField.setEditable(false);

        jLabel20.setText("MAC Address");

        macTextField.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(computerNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .addComponent(serialNoTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(osVersionTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(osNameTextFieldComp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(domainNameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userNameTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cpuTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                            .addComponent(ramTextField)
                            .addComponent(dvdTextField)
                            .addComponent(compModelTextField)
                            .addComponent(ipv4TextField)
                            .addComponent(macTextField))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(scanButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(compModelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(domainNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(cpuTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(osNameTextFieldComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(ramTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(osVersionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(dvdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(computerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(ipv4TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(serialNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)
                            .addComponent(macTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanButton))
        );

        jTabbedPane1.addTab("Status", jPanel1);

        eventsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Time", "Server", "Message", "Type", "Notification"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(eventsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Event Log", jPanel2);

        contactsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Email", "SMS Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(contactsTable);

        smsButton.setLabel("SMS");
        smsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smsButtonActionPerformed(evt);
            }
        });

        emailButton.setLabel("Email");
        emailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailButtonActionPerformed(evt);
            }
        });

        saveContactsButton.setLabel("Save");
        saveContactsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveContactsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smsButton)
                .addGap(18, 18, 18)
                .addComponent(emailButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveContactsButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smsButton)
                    .addComponent(emailButton)
                    .addComponent(saveContactsButton)))
        );

        jTabbedPane1.addTab("Contact", jPanel3);

        saveSettingsButton.setText("Save");
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jLabel1.setText("SMS Url (Starhub)");

        jLabel21.setText("SMS Url (singtel)");

        jLabel22.setText("Sender Name");

        jLabel23.setText("Headphone Number");

        starhubTestSend.setText("Send");
        starhubTestSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starhubTestSendActionPerformed(evt);
            }
        });

        jLabel24.setText("Sender Name");

        jLabel25.setText("Headphone Number");

        singtelTestSend.setText("Send");
        singtelTestSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singtelTestSendActionPerformed(evt);
            }
        });

        jLabel26.setText("Test Message");

        jLabel27.setText("Test Message");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(smsTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel23)
                                .addComponent(jLabel22)
                                .addComponent(jLabel26))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(starhubSenderName)
                                .addComponent(starhubNumber)
                                .addComponent(starhubTestMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(starhubTestSend, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(smsUrlSingTelTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel25)
                                .addComponent(jLabel24)
                                .addComponent(jLabel27))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(singtelSenderName)
                                .addComponent(singtelNumber)
                                .addComponent(singtelTestMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(singtelTestSend, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(350, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(smsTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(starhubSenderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(starhubNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(starhubTestMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starhubTestSend))
                .addGap(35, 35, 35)
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(smsUrlSingTelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24))
                    .addComponent(singtelSenderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(singtelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(singtelTestMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singtelTestSend))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("SMS", jPanel5);

        jLabel4.setText("User");

        userTextField.setEnabled(false);

        jLabel5.setText("Password");

        emailPasswordField.setEnabled(false);

        jScrollPane5.setViewportView(emailSettingList);

        jLabel3.setText("Email List");

        jLabel6.setText("Mail Server Host");

        mailServerHost.setEnabled(false);

        jLabel7.setText("Mail Server Port");

        createMailButton.setText("Create");
        createMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMailButtonActionPerformed(evt);
            }
        });

        saveMailButton.setText("Save");
        saveMailButton.setEnabled(false);
        saveMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMailButtonActionPerformed(evt);
            }
        });

        deleteMailButton.setText("Delete");
        deleteMailButton.setEnabled(false);
        deleteMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMailButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Config Name");

        configNameTextField.setEnabled(false);

        enabledCheckBox.setSelected(true);
        enabledCheckBox.setText("Enabled");
        enabledCheckBox.setEnabled(false);

        mailServerPortTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        mailServerPortTextField.setEnabled(false);

        jCheckBox1.setText("Default");
        jCheckBox1.setEnabled(false);

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        moveUpButton.setText("Move Up");
        moveUpButton.setEnabled(false);
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move Down");
        moveDownButton.setEnabled(false);
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(createMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(moveUpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moveDownButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mailServerHost, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(mailServerPortTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                                            .addComponent(jLabel4)
                                            .addComponent(userTextField, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addComponent(configNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(enabledCheckBox)
                                .addComponent(emailPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(saveMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editButton)
                                    .addGap(33, 33, 33)
                                    .addComponent(cancelButton))))
                        .addGap(140, 140, 140))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(moveUpButton)
                        .addComponent(moveDownButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(configNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mailServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mailServerPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enabledCheckBox)
                            .addComponent(jCheckBox1))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveMailButton)
                            .addComponent(cancelButton)
                            .addComponent(editButton)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createMailButton)
                    .addComponent(deleteMailButton))
                .addContainerGap())
        );

        jCheckBox1.getAccessibleContext().setAccessibleName("defaultEmailCheckBox");

        jTabbedPane2.addTab("Email", jPanel6);

        jLabel2.setText("Monitoring Type");

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setLabel("VB Scripts");

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setLabel("Java Library");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1)
                    .addComponent(jLabel2))
                .addContainerGap(715, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addContainerGap(377, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Monitoring", jPanel7);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jTabbedPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveSettingsButton))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveSettingsButton))
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Settings", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveContactsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveContactsButtonActionPerformed
        List<Contact> contacts = new ArrayList<Contact>();
        int contactListSize = contactsTable.getModel().getRowCount();
        for (int i = 0; i < contactListSize; i++) {
            String contactName = (String) contactsTable.getModel().getValueAt(i, 0);
            String contactEmail = (String) contactsTable.getModel().getValueAt(i, 1);
            String contactSMS = (String) contactsTable.getModel().getValueAt(i, 2);
            if (contactName != null && (contactEmail != null || contactSMS != null)) {
                Contact contact = new Contact(contactName, contactEmail, contactSMS);
                contacts.add(contact);
            }

        }
        contactController.saveContacts(contacts);
    }//GEN-LAST:event_saveContactsButtonActionPerformed

    /**
     * SMS Notification
     *
     * @param evt
     */
    private void smsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smsButtonActionPerformed
        if (smsTextField1.getText() == null || "".equals(smsTextField1.getText())) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "SMS URL is not set! \nPlease go to Settings",
                    "SMS error",
                    JOptionPane.ERROR_MESSAGE);
        }

        Setting setting = settingsController.getSettings();
        List<Contact> contacts = contactController.getContactsWithSMSNumberSet();
        contactController.sendSmsToContacts(setting, contacts);

    }//GEN-LAST:event_smsButtonActionPerformed

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        Setting setting = new Setting();
        setting.setSmsUrlWebStar(smsTextField1.getText().trim());
        setting.setSmsUrlSingTel(smsUrlSingTelTextField.getText().trim());
        setting.setSmsTestWebStarPhoneNumber(starhubNumber.getText().trim());
        setting.setSmsTestWebStarSenderName(starhubSenderName.getText().trim());
        setting.setSmsTestWebStarTestMessage(starhubTestMessage.getText().trim());
        setting.setSmsTestSingTelPhoneNumber(singtelNumber.getText().trim());
        setting.setSmsTestSingTelSenderName(singtelSenderName.getText().trim());
        setting.setSmsTestSingTelTestMessage(singtelTestMessage.getText().trim());
        settingsController.saveSettings(setting);
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void emailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailButtonActionPerformed
        List<Contact> contacts = contactController.getContactsWithEmailAddressSet();
        List<EmailSettings> emailSettingses = settingsController.getSettings().getEmailSettings();
        if (contacts.isEmpty()) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "There are no contacts to be notified!",
                    "Email error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (emailSettingses.isEmpty()) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "There are no valid Email settings",
                    "Email error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            contactController.sendEmailToContacts(emailSettingses, contacts);
        }

    }//GEN-LAST:event_emailButtonActionPerformed

    private void createMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMailButtonActionPerformed
        emailSettingList.clearSelection();
        changeEmailSettingsFormStatus(true);
    }//GEN-LAST:event_createMailButtonActionPerformed

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        servers = diskMonitorController.getDiskUsageForAllServers();

        defaultListModel.clear();
        for (Server server : servers) {
            defaultListModel.addElement(server.getServerName());
        }
    }//GEN-LAST:event_scanButtonActionPerformed

    public List<Server> getServersList() {
        return servers;
    }

    public void addServer(Server server) {
        System.out.println("Add server");
        servers.add(server);
        defaultListModel.addElement(server.getServerName());
    }

    public void updateServerInfo(int index, Server server) {
        System.out.println("Update server");
        servers.set(index, server);
        defaultListModel.set(index, server.getServerName());
    }

    public DefaultListModel getDefaultListModel() {
        return this.defaultListModel;
    }

    private void saveMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMailButtonActionPerformed
        int selectedIndex = -1;
        boolean isUpdate = false;
        EmailSettings emailSettings = null;
        String oldConfigName = "";
        Integer priorityId = 0;

        if ((selectedIndex = emailSettingList.getSelectedIndex()) != -1) {
            emailSettings = setting.getEmailSettings().get(selectedIndex);
            oldConfigName = emailSettings.getPriorityId() + "-" + emailSettings.getConfigName();
            isUpdate = true;
        }

        boolean isValid = checkEmailSettingsForm();

        if (isValid) {
            if (!isUpdate) {
                emailSettings = new EmailSettings();
                emailSettings.setPriorityId(setting.getEmailSettings().size());
            }
            emailSettings.setConfigName(configNameTextField.getText().trim());
            emailSettings.setServerHost(mailServerHost.getText().trim());
            emailSettings.setServerPort(mailServerPortTextField.getText().trim());
            emailSettings.setUserName(userTextField.getText().trim());
            emailSettings.setPassword(new String(emailPasswordField.getPassword()));
            emailSettings.setEnabled(enabledCheckBox.isSelected());
            emailSettings.setDefaultEmail(false);

            if (jCheckBox1.isSelected()) {
                boolean found = false;
                for (EmailSettings emailSetting : setting.getEmailSettings()) {
                    if (emailSetting.isDefaultEmail()) {
                        JOptionPane.showMessageDialog(new JFrame(),
                                "There is already a default email set",
                                emailSetting.getConfigName(),
                                JOptionPane.ERROR_MESSAGE);
                        found = true;
                        jCheckBox1.setSelected(false);
                        break;
                    }
                }
                if (!found) {
                    if (isUpdate) {
                        updateEmail(emailSettings, oldConfigName);
                    } else {
                        emailSettings.setDefaultEmail(true);
                        saveEmailAndAddToList(emailSettings);
                    }
                }
            } else {
                if (isUpdate) {
                    updateEmail(emailSettings, oldConfigName);
                } else {
                    saveEmailAndAddToList(emailSettings);
                }
            }
            changeEmailSettingsFormStatus(false);
        }
        editButton.setEnabled(false);


    }//GEN-LAST:event_saveMailButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        changeEmailSettingsFormStatus(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMailButtonActionPerformed
        int selectedIndex = emailSettingList.getSelectedIndex();
        String emailConfigName = (String) emailSettingsListModel.get(selectedIndex);
        System.out.println("config: " + emailConfigName);
        emailSettingsListModel.removeElementAt(selectedIndex);
        changeEmailSettingsFormStatus(false);
        editButton.setEnabled(false);
        settingsController.deleteEmailSetting(selectedIndex + "-" + emailConfigName);
        setting.getEmailSettings().remove(selectedIndex);
    }//GEN-LAST:event_deleteMailButtonActionPerformed

    private void starhubTestSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starhubTestSendActionPerformed
        if (smsTextField1.getText() == null || "".equals(smsTextField1.getText())) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "SMS URL is not set! \nPlease go to Settings",
                    "SMS error",
                    JOptionPane.ERROR_MESSAGE);
        }
        if (starhubNumber.getText() == null || "".equals(starhubNumber.getText())) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "SMS Headphone Number is not set! \nPlease go to Settings",
                    "SMS error",
                    JOptionPane.ERROR_MESSAGE);
        }

        Setting setting = settingsController.getSettings();
        testController.sendStarhubTestSMS(setting, starhubNumber.getText().trim(),
                starhubSenderName.getText().trim(), starhubTestMessage.getText().trim());
    }//GEN-LAST:event_starhubTestSendActionPerformed

    private void singtelTestSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singtelTestSendActionPerformed
        if (smsUrlSingTelTextField.getText() == null || "".equals(smsUrlSingTelTextField.getText())) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "SMS URL is not set! \nPlease go to Settings",
                    "SMS error",
                    JOptionPane.ERROR_MESSAGE);
        }
        if (singtelNumber.getText() == null || "".equals(singtelNumber.getText())) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "SMS Headphone Number is not set! \nPlease go to Settings",
                    "SMS error",
                    JOptionPane.ERROR_MESSAGE);
        }

        Setting setting = settingsController.getSettings();
        testController.sendSingtelTestSMS(setting, singtelNumber.getText().trim(),
                singtelSenderName.getText().trim(), singtelTestMessage.getText().trim());
    }//GEN-LAST:event_singtelTestSendActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        changeEmailSettingsFormEdit();
    }//GEN-LAST:event_editButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        int selectedIndex = emailSettingList.getSelectedIndex();
        if (selectedIndex > 0) {
            EmailSettings emailSettings = setting.getEmailSettings().get(selectedIndex);
            settingsController.updateEmailSetting(emailSettings, null);
            emailSettingList.setSelectedIndex(selectedIndex - 1);
        }

    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
    }//GEN-LAST:event_moveDownButtonActionPerformed
//
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainForm().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField compModelTextField;
    private javax.swing.JTextField computerNameTextField;
    private javax.swing.JTextField configNameTextField;
    private javax.swing.JTable contactsTable;
    private javax.swing.JTextField cpuTextField;
    private javax.swing.JButton createMailButton;
    private javax.swing.JButton deleteMailButton;
    private javax.swing.JTextField domainNameTextField;
    private javax.swing.JTextField dvdTextField;
    private javax.swing.JButton editButton;
    private javax.swing.JButton emailButton;
    private javax.swing.JPasswordField emailPasswordField;
    private javax.swing.JList emailSettingList;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JTable eventsTable;
    private javax.swing.JTextField ipv4TextField;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField macTextField;
    private javax.swing.JTextField mailServerHost;
    private javax.swing.JFormattedTextField mailServerPortTextField;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JTextField osNameTextFieldComp;
    private javax.swing.JTextField osVersionTextField;
    private javax.swing.JTextField ramTextField;
    private javax.swing.JButton saveContactsButton;
    private javax.swing.JButton saveMailButton;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JButton scanButton;
    private javax.swing.JTextField serialNoTextField;
    private javax.swing.JTable serverSpecsTable;
    private javax.swing.JList serversList;
    private javax.swing.JTextField singtelNumber;
    private javax.swing.JTextField singtelSenderName;
    private javax.swing.JTextField singtelTestMessage;
    private javax.swing.JButton singtelTestSend;
    private javax.swing.JButton smsButton;
    private javax.swing.JTextField smsTextField1;
    private javax.swing.JTextField smsUrlSingTelTextField;
    private javax.swing.JTextField starhubNumber;
    private javax.swing.JTextField starhubSenderName;
    private javax.swing.JTextField starhubTestMessage;
    private javax.swing.JToggleButton starhubTestSend;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

    private void loadContactTableInfo() {
        List<Contact> contacts = contactController.getContacts();
        DefaultTableModel tableModel = (DefaultTableModel) contactsTable.getModel();

        for (Contact contact : contacts) {
            tableModel.addRow(
                    new Object[]{contact.getName(), contact.getEmail(), contact.getSmsNumber()});
        }

        for (int i = contacts.size() - 1; i < 10; i++) {
            tableModel.addRow(new Object[]{null, null, null});
        }

    }

    private void loadSettings() {
        setting = settingsController.getSettings();
        smsTextField1.setText(setting.getSmsUrlWebStar() == null ? "" : setting.getSmsUrlWebStar());
        starhubSenderName.setText(setting.getSmsTestWebStarSenderName() == null ? "" : setting.getSmsTestWebStarSenderName());
        starhubNumber.setText(setting.getSmsTestWebStarPhoneNumber() == null ? "" : setting.getSmsTestWebStarPhoneNumber());
        starhubTestMessage.setText(setting.getSmsTestWebStarTestMessage() == null ? "" : setting.getSmsTestWebStarTestMessage());

        smsUrlSingTelTextField.setText(setting.getSmsUrlSingTel() == null ? "" : setting.getSmsUrlSingTel());
        singtelSenderName.setText(setting.getSmsTestSingTelSenderName() == null ? "" : setting.getSmsTestSingTelSenderName());
        singtelNumber.setText(setting.getSmsTestSingTelPhoneNumber() == null ? "" : setting.getSmsTestSingTelPhoneNumber());
        singtelTestMessage.setText(setting.getSmsTestSingTelTestMessage() == null ? "" : setting.getSmsTestSingTelTestMessage());

        initEmailSettingsList();
    }

    private void initServersList() {
        defaultListModel = new DefaultListModel();
        serversList.setModel(defaultListModel);

        ListSelectionListener s = new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                JList list = (JList) e.getSource();
                int selectedIndex = list.getSelectedIndex();
                Server server = servers.get(selectedIndex);

                populateGeneralInfo(server);

                DefaultTableModel defaultTableModel = (DefaultTableModel) serverSpecsTable.getModel();
                defaultTableModel.setRowCount(0);

                for (DriveUsage driverUsage : server.getServerInfo().getDiskUsage().getDriveUsages()) {
                    defaultTableModel.addRow(
                            new Object[]{driverUsage.getDriveLetter(), driverUsage.getCapacity(),
                        driverUsage.getFreeSpace(), driverUsage.getFileSystem()});
                }
            }

            private void populateGeneralInfo(Server server) {
                userNameTextField.setText(server.getServerInfo().getGeneralInfo().getUserName());
                domainNameTextField.setText(server.getServerInfo().getGeneralInfo().getDomainName());
                osNameTextFieldComp.setText(server.getServerInfo().getGeneralInfo().getOsName());
                osVersionTextField.setText(server.getServerInfo().getGeneralInfo().getOsVersion());
                computerNameTextField.setText(server.getServerInfo().getGeneralInfo().getComputerName());
                serialNoTextField.setText(server.getServerInfo().getGeneralInfo().getSerialNumber());
                compModelTextField.setText(server.getServerInfo().getGeneralInfo().getComputerName());
                cpuTextField.setText(server.getServerInfo().getGeneralInfo().getCpu());
                ramTextField.setText(server.getServerInfo().getGeneralInfo().getRamCapacity());
                dvdTextField.setText(server.getServerInfo().getGeneralInfo().getDvdDrive());
                ipv4TextField.setText(server.getServerInfo().getGeneralInfo().getIpv4Address());
                macTextField.setText(server.getServerInfo().getGeneralInfo().getMacAddress());

            }
        };
        serversList.addListSelectionListener(s);
    }

    private void initEmailSettingsList() {
        emailSettingsListModel = new DefaultListModel();
        emailSettingList.setModel(emailSettingsListModel);

        emailSettingsListModel.clear();
        for (EmailSettings emailSettings : setting.getEmailSettings()) {
            emailSettingsListModel.addElement(emailSettings.getConfigName());
        }

        ListSelectionListener s = new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                JList list = (JList) e.getSource();
                int selectedIndex = list.getSelectedIndex();

                if (selectedIndex != -1) {
                    EmailSettings emailSettings = setting.getEmailSettings().get(selectedIndex);
                    populateGeneralInfo(emailSettings);
                }
            }

            private void populateGeneralInfo(EmailSettings emailSettings) {
                configNameTextField.setText(emailSettings.getConfigName().trim());
                mailServerHost.setText(emailSettings.getServerHost().trim());
                mailServerPortTextField.setText(emailSettings.getServerPort().trim());
                userTextField.setText(emailSettings.getUserName());
                emailPasswordField.setText(emailSettings.getPassword());
                deleteMailButton.setEnabled(true);
                editButton.setEnabled(true);
                if (emailSettingsListModel.size() > 1) {
                    moveUpButton.setEnabled(true);
                    moveDownButton.setEnabled(true);
                }
            }
        };
        emailSettingList.addListSelectionListener(s);
    }

    private void changeEmailSettingsFormStatus(boolean enabled) {
        mailServerHost.setEnabled(enabled);
        mailServerHost.setText("");
        mailServerPortTextField.setEnabled(enabled);
        mailServerPortTextField.setText("");
        userTextField.setEnabled(enabled);
        userTextField.setText("");
        emailPasswordField.setEnabled(enabled);
        emailPasswordField.setText("");
        configNameTextField.setEnabled(enabled);
        configNameTextField.setText("");
        enabledCheckBox.setEnabled(enabled);
        saveMailButton.setEnabled(enabled);
        cancelButton.setEnabled(enabled);
        jCheckBox1.setEnabled(enabled);
        createMailButton.setEnabled(!enabled);
        deleteMailButton.setEnabled(!enabled);
        editButton.setEnabled(!enabled);
        emailSettingList.setEnabled(!enabled);
    }

    private void changeEmailSettingsFormEdit() {
        mailServerHost.setEnabled(true);
        mailServerPortTextField.setEnabled(true);
        userTextField.setEnabled(true);
        emailPasswordField.setEnabled(true);
        configNameTextField.setEnabled(true);
        enabledCheckBox.setEnabled(true);
        saveMailButton.setEnabled(true);
        cancelButton.setEnabled(true);
        jCheckBox1.setEnabled(true);
        createMailButton.setEnabled(false);
        deleteMailButton.setEnabled(false);
        editButton.setEnabled(false);

        emailSettingList.setEnabled(false);
    }

    private boolean checkEmailSettingsForm() {
        if (configNameTextField.getText().trim().equals("")
                || mailServerHost.getText().trim().equals("")
                || mailServerPortTextField.getText().trim().equals("")
                || userTextField.getText().trim().equals("")
                || (new String(emailPasswordField.getPassword())).equals("")) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "All fields are required",
                    "Save error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void saveEmailAndAddToList(EmailSettings emailSettings) {
        settingsController.addEmailSetting(emailSettings);
        setting = settingsController.getSettings();
        emailSettingsListModel.clear();
        for (EmailSettings emailSetting : setting.getEmailSettings()) {
            emailSettingsListModel.addElement(emailSetting.getConfigName());
        }
    }

    private void updateEmail(EmailSettings emailSettings, String oldConfigName) {
        settingsController.updateEmailSetting(emailSettings, oldConfigName);
        setting = settingsController.getSettings();
        emailSettingsListModel.clear();
        for (EmailSettings emailSetting : setting.getEmailSettings()) {
            emailSettingsListModel.addElement(emailSetting.getConfigName());
        }
    }
}
